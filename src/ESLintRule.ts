import { ESLintPlugin } from "./ESLintPlugin";

/*
    eslint-disable
        jsdoc/require-jsdoc,
        lines-between-class-members */

/**
 * Indicates an `eslint`-rule.
 */
export abstract class ESLintRule
{
    public static readonly TypeScriptAdjacentOverloadSignatures = `${ESLintPlugin.TypeScriptESLint}/adjacent-overload-signatures`;
    public static readonly TypeScriptArrayType = `${ESLintPlugin.TypeScriptESLint}/array-type`;
    public static readonly TypeScriptAwaitThenable = `${ESLintPlugin.TypeScriptESLint}/await-thenable`;
    public static readonly TypeScriptBanTSComment = `${ESLintPlugin.TypeScriptESLint}/ban-ts-comment`;
    public static readonly TypeScriptBanTypes = `${ESLintPlugin.TypeScriptESLint}/ban-types`;
    public static readonly TypeScriptCamelCase = `${ESLintPlugin.TypeScriptESLint}/camelcase`;
    public static readonly TypeScriptClassNameCasing = `${ESLintPlugin.TypeScriptESLint}/class-name-casing`;
    public static readonly TypeScriptCommaSpacing = `${ESLintPlugin.TypeScriptESLint}/comma-spacing`;
    public static readonly TypeScriptConsistentTypeAssertions = `${ESLintPlugin.TypeScriptESLint}/consistent-type-assertions`;
    public static readonly TypeScriptConsistentTypeDefinitions = `${ESLintPlugin.TypeScriptESLint}/consistent-type-definitions`;
    public static readonly TypeScriptDefaultParamLast = `${ESLintPlugin.TypeScriptESLint}/default-param-last`;
    public static readonly TypeScriptExplicitFunctionReturnType = `${ESLintPlugin.TypeScriptESLint}/explicit-function-return-type`;
    public static readonly TypeScriptExplicitMemberAccessibility = `${ESLintPlugin.TypeScriptESLint}/explicit-member-accessibility`;
    public static readonly TypeScriptExplicitModuleBoundaryTypes = `${ESLintPlugin.TypeScriptESLint}/explicit-module-boundary-types`;
    public static readonly TypeScriptFuncCallSpacing = `${ESLintPlugin.TypeScriptESLint}/func-call-spacing`;
    public static readonly TypeScriptIndent = `${ESLintPlugin.TypeScriptESLint}/indent`;
    public static readonly TypeScriptInterfaceNamePrefix = `${ESLintPlugin.TypeScriptESLint}/interface-name-prefix`;
    public static readonly TypeScriptMemberDelimiterStyle = `${ESLintPlugin.TypeScriptESLint}/member-delimiter-style`;
    public static readonly TypeScriptMemberOrdering = `${ESLintPlugin.TypeScriptESLint}/member-ordering`;
    public static readonly TypeScriptNamingConvention = `${ESLintPlugin.TypeScriptESLint}/naming-convention`;
    public static readonly TypeScriptNoDynamicDelete = `${ESLintPlugin.TypeScriptESLint}/no-dynamic-delete`;
    public static readonly TypeScriptNoEmptyFunction = `${ESLintPlugin.TypeScriptESLint}/no-empty-function`;
    public static readonly TypeScriptNoEmptyInterface = `${ESLintPlugin.TypeScriptESLint}/no-empty-interface`;
    public static readonly TypeScriptNoExplicitAny = `${ESLintPlugin.TypeScriptESLint}/no-explicit-any`;
    public static readonly TypeScriptNoFloatingPromises = `${ESLintPlugin.TypeScriptESLint}/no-floating-promises`;
    public static readonly TypeScriptNoForInArray = `${ESLintPlugin.TypeScriptESLint}/no-for-in-array`;
    public static readonly TypeScriptNoInferrableTypes = `${ESLintPlugin.TypeScriptESLint}/no-inferrable-types`;
    public static readonly TypeScriptNoMisusedNew = `${ESLintPlugin.TypeScriptESLint}/no-misused-new`;
    public static readonly TypeScriptNoNamespace = `${ESLintPlugin.TypeScriptESLint}/no-namespace`;
    public static readonly TypeScriptNoParameterProperties = `${ESLintPlugin.TypeScriptESLint}/no-parameter-properties`;
    public static readonly TypeScriptNoThisAlias = `${ESLintPlugin.TypeScriptESLint}/no-this-alias`;
    public static readonly TypeScriptNoThrowLiteral = `${ESLintPlugin.TypeScriptESLint}/no-throw-literal`;
    public static readonly TypeScriptNoUnnecessaryBooleanLiteralCompare = `${ESLintPlugin.TypeScriptESLint}/no-unnecessary-boolean-literal-compare`;
    public static readonly TypeScriptNoUnnecessaryQualifier = `${ESLintPlugin.TypeScriptESLint}/no-unnecessary-qualifier`;
    public static readonly TypeScriptNoUnnecessaryTypeArguments = `${ESLintPlugin.TypeScriptESLint}/no-unnecessary-type-arguments`;
    public static readonly TypeScriptNoUnnecessaryTypeAssertion = `${ESLintPlugin.TypeScriptESLint}/no-unnecessary-type-assertion`;
    public static readonly TypeScriptNoUnusedExpressions = `${ESLintPlugin.TypeScriptESLint}/no-unused-expressions`;
    public static readonly TypeScriptNoUnusedVars = `${ESLintPlugin.TypeScriptESLint}/no-unused-vars`;
    public static readonly TypeScriptNoUseBeforeDefine = `${ESLintPlugin.TypeScriptESLint}/no-use-before-define`;
    public static readonly TypeScriptNoVarRequires = `${ESLintPlugin.TypeScriptESLint}/no-var-requires`;
    public static readonly TypeScriptPreferAsConst = `${ESLintPlugin.TypeScriptESLint}/prefer-as-const`;
    public static readonly TypeScriptPreferForOf = `${ESLintPlugin.TypeScriptESLint}/prefer-for-of`;
    public static readonly TypeScriptPreferFunctionType = `${ESLintPlugin.TypeScriptESLint}/prefer-function-type`;
    public static readonly TypeScriptPreferIncludes = `${ESLintPlugin.TypeScriptESLint}/prefer-includes`;
    public static readonly TypeScriptPreferNamespaceKeyword = `${ESLintPlugin.TypeScriptESLint}/prefer-namespace-keyword`;
    public static readonly TypeScriptPreferNullishCoalescing = `${ESLintPlugin.TypeScriptESLint}/prefer-nullish-coalescing`;
    public static readonly TypeScriptPreferOptionalChain = `${ESLintPlugin.TypeScriptESLint}/prefer-optional-chain`;
    public static readonly TypeScriptPreferStringStartsEndsWith = `${ESLintPlugin.TypeScriptESLint}/prefer-string-starts-ends-with`;
    public static readonly TypeScriptQuotes = `${ESLintPlugin.TypeScriptESLint}/quotes`;
    public static readonly TypeScriptRestrictPlusOperands = `${ESLintPlugin.TypeScriptESLint}/restrict-plus-operands`;
    public static readonly TypeScriptReturnAwait = `${ESLintPlugin.TypeScriptESLint}/return-await`;
    public static readonly TypeScriptUnboundMethod = `${ESLintPlugin.TypeScriptESLint}/unbound-method`;
    public static readonly TypeScriptSemi = `${ESLintPlugin.TypeScriptESLint}/semi`;
    public static readonly TypeScriptSpaceBeforeFunctionParen = `${ESLintPlugin.TypeScriptESLint}/space-before-function-paren`;
    public static readonly TypeScriptTripleSlashReference = `${ESLintPlugin.TypeScriptESLint}/triple-slash-reference`;
    public static readonly TypeScriptTypeAnnotationSpacing = `${ESLintPlugin.TypeScriptESLint}/type-annotation-spacing`;
    public static readonly TypeScriptUnifiedSignatures = `${ESLintPlugin.TypeScriptESLint}/unified-signatures`;
    public static readonly TSLint = `${ESLintPlugin.TSLint}/config`;
    public static readonly Deprecation = `${ESLintPlugin.Deprecation}/deprecation`;
    public static readonly ImportNoDefaultExport = `${ESLintPlugin.Import}/no-default-export`;
    public static readonly ImportNoDuplicates = `${ESLintPlugin.Import}/no-duplicates`;
    public static readonly ImportNoExtraneousDependencies = `${ESLintPlugin.Import}/no-extraneous-dependencies`;
    public static readonly ImportOrder = `${ESLintPlugin.Import}/order`;
    public static readonly JSDocCheckAlignment = `${ESLintPlugin.JSDoc}/check-alignment`;
    public static readonly JSDocCheckIndentation = `${ESLintPlugin.JSDoc}/check-indentation`;
    public static readonly JSDocCheckParamNames = `${ESLintPlugin.JSDoc}/check-param-names`;
    public static readonly JSDocCheckSyntax = `${ESLintPlugin.JSDoc}/check-syntax`;
    public static readonly JSDocCheckTagNames = `${ESLintPlugin.JSDoc}/check-tag-names`;
    public static readonly JSDocCheckValues = `${ESLintPlugin.JSDoc}/check-values`;
    public static readonly JSDocEmptyTags = `${ESLintPlugin.JSDoc}/empty-tags`;
    public static readonly JSDocNewlineAfterDescription = `${ESLintPlugin.JSDoc}/newline-after-description`;
    public static readonly JSDocNoTypes = `${ESLintPlugin.JSDoc}/no-types`;
    public static readonly JSDocRequireDescription = `${ESLintPlugin.JSDoc}/require-description`;
    public static readonly JSDocRequireJSDoc = `${ESLintPlugin.JSDoc}/require-jsdoc`;
    public static readonly JSDocRequireParamDescription = `${ESLintPlugin.JSDoc}/require-param-description`;
    public static readonly JSDocRequireParamName = `${ESLintPlugin.JSDoc}/require-param-name`;
    public static readonly JSDocRequireParam = `${ESLintPlugin.JSDoc}/require-param`;
    public static readonly JSDocRequireParamType = `${ESLintPlugin.JSDoc}/require-param-type`;
    public static readonly JSDocRequireReturns = `${ESLintPlugin.JSDoc}/require-returns`;
    public static readonly JSDocRequireReturnsType = `${ESLintPlugin.JSDoc}/require-returns-type`;
    public static readonly NodeNoUnpublishedImport = `${ESLintPlugin.Node}/no-unpublished-import`;
    public static readonly NodeNoUnpublishedRequire = `${ESLintPlugin.Node}/no-unpublished-require`;
    public static readonly ArrayBracketNewLine = "array-bracket-newline";
    public static readonly ArrayBracketSpacing = "array-bracket-spacing";
    public static readonly ArrayElementNewline = "array-element-newline";
    public static readonly ArrowParens = "arrow-parens";
    public static readonly ArrowSpacing = "arrow-spacing";
    public static readonly BlockSpacing = "block-spacing";
    public static readonly BraceStyle = "brace-style";
    public static readonly CommaDangle = "comma-dangle";
    public static readonly CommaStyle = "comma-style";
    public static readonly Complexity = "complexity";
    public static readonly ComputedPropertySpacing = "computed-property-spacing";
    public static readonly Curly = "curly";
    public static readonly DotNotation = "dot-notation";
    public static readonly EOLLast = "eol-last";
    public static readonly EQEQEQ = "eqeqeq";
    public static readonly FunctionCallArgumentNewline = "function-call-argument-newline";
    public static readonly GeneratorStarSpacing = "generator-star-spacing";
    public static readonly GroupedAccessorPairs = "grouped-accessor-pairs";
    public static readonly GuardForIn = "guard-for-in";
    public static readonly LinesBetweenClassMembers = "lines-between-class-members";
    public static readonly MaxClassesPerFile = "max-classes-per-file";
    public static readonly MaxLen = "max-len";
    public static readonly MultilineTernary = "multiline-ternary";
    public static readonly NewParens = "new-parens";
    public static readonly NoAsyncPromiseExecutor = "no-async-promise-executor";
    public static readonly NoBitwise = "no-bitwise";
    public static readonly NoCaller = "no-caller";
    public static readonly NoCaseDeclarations = "no-case-declarations";
    public static readonly NoCondAssign = "no-cond-assign";
    public static readonly NoConsole = "no-console";
    public static readonly NoConstantCondition = "no-constant-condition";
    public static readonly NoConstructorReturn = "no-constructor-return";
    public static readonly NoControlRegex = "no-control-regex";
    public static readonly NoDebugger = "no-debugger";
    public static readonly NoDuplicateCase = "no-duplicate-case";
    public static readonly NoEmpty = "no-empty";
    public static readonly NoEmptyPattern = "no-empty-pattern";
    public static readonly NoEval = "no-eval";
    public static readonly NoFallthrough = "no-fallthrough";
    public static readonly NoFloatingDecimal = "no-floating-decimal";
    public static readonly NoImplicitCoercion = "no-implicit-coercion";
    public static readonly NoInnerDeclarations = "no-inner-declarations";
    public static readonly NoInvalidThis = "no-invalid-this";
    public static readonly NoLonelyIf = "no-lonely-if";
    public static readonly NoMultipleEmptyLines = "no-multiple-empty-lines";
    public static readonly NoMultiSpaces = "no-multi-spaces";
    public static readonly NoNewWrappers = "no-new-wrappers";
    public static readonly NoOctalEscape = "no-octal-escape";
    public static readonly NoRegexSpaces = "no-regex-spaces";
    public static readonly NoReturnAwait = "no-return-await";
    public static readonly NoSequences = "no-sequences";
    public static readonly NoShadow = "no-shadow";
    public static readonly NoSparseArrays = "no-sparse-arrays";
    public static readonly NoThrowLiteral = "no-throw-literal";
    public static readonly NoTrailingSpaces = "no-trailing-spaces";
    public static readonly NoUndefInit = "no-undef-init";
    public static readonly NoUnreachable = "no-unreachable";
    public static readonly NoUnsafeFinally = "no-unsafe-finally";
    public static readonly NoUnusedLabels = "no-unused-labels";
    public static readonly NoUselessCatch = "no-useless-catch";
    public static readonly NoUselessRename = "no-useless-rename";
    public static readonly NoVar = "no-var";
    public static readonly NoVoid = "no-void";
    public static readonly NoWhitespaceBeforeProperty = "no-whitespace-before-property";
    public static readonly ObjectCurlyNewline = "object-curly-newline";
    public static readonly ObjectCurlySpacing = "object-curly-spacing";
    public static readonly ObjectPropertyNewline = "object-property-newline";
    public static readonly ObjectShorthand = "object-shorthand";
    public static readonly OneVar = "one-var";
    public static readonly OperatorLineBreak = "operator-linebreak";
    public static readonly PaddedBlocks = "padded-blocks";
    public static readonly PaddingLineBetweenStatements = "padding-line-between-statements";
    public static readonly PreferConst = "prefer-const";
    public static readonly PreferObjectSpread = "prefer-object-spread";
    public static readonly PreferRestParams = "prefer-rest-params";
    public static readonly PreferSpread = "prefer-spread";
    public static readonly QuoteProps = "quote-props";
    public static readonly RestSpreadSpacing = "rest-spread-spacing";
    public static readonly SemiSpacing = "semi-spacing";
    public static readonly SemiStyle = "semi-style";
    public static readonly SpaceBeforeBlocks = "space-before-blocks";
    public static readonly SpaceInParens = "space-in-parens";
    public static readonly SpaceInfixOPs = "space-infix-ops";
    public static readonly SpaceUnaryOPs = "space-unary-ops";
    public static readonly SpacedComment = "spaced-comment";
    public static readonly SwitchColonSpacing = "switch-colon-spacing";
    public static readonly TemplateCurlySpacing = "template-curly-spacing";
    public static readonly UseIsNaN = "use-isnan";
    public static readonly ValidTypeof = "valid-typeof";
    public static readonly YieldStarSpacing = "yield-star-spacing";
    public static readonly Yoda = "yoda";

    /**
     * Initializes a new instance of the {@link ESLintRule `ESLintRule`} class.
     */
    private constructor()
    { }
}
